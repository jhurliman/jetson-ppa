# syntax=docker/dockerfile:1.2
FROM ubuntu:jammy

ENV DEBIAN_FRONTEND=noninteractive

# Add the CMake official PPA
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    apt-transport-https \
    apt-utils \
    ca-certificates \
    gnupg2 \
    libssl-dev \
    software-properties-common \
    wget && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null && \
    echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

# Install build dependencies
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    file \
    git \
    git-lfs \
    ninja-build \
    pkg-config

# Install CUDA Toolkit
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    rm cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get install -y --no-install-recommends cuda-toolkit-12-0

# Setup our PPA and install eigen and ceres
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    wget -qO- https://repo.download.mvi.llc/jhurliman-public-key.asc | gpg --no-default-keyring --keyring /usr/share/keyrings/jhurliman.gpg --import && \
    echo "deb [signed-by=/usr/share/keyrings/jhurliman.gpg] https://repo.download.mvi.llc/ubuntu/x64 jammy main" >> /etc/apt/sources.list.d/mvi-ppa.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    libceres-dev=2.2.0 \
    libeigen3-dev=3.4.0

# Install other OpenCV dependencies
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    gfortran \
    libatlas-base-dev \
    libavcodec-dev \
    libavformat-dev \
    libblas-dev \
    libcudnn8 \
    libcudnn8-dev \
    libfaac-dev \
    libfreetype6-dev \
    libgflags-dev \
    libglew-dev \
    libgoogle-glog-dev \
    libharfbuzz-dev \
    libhdf5-dev \
    libjpeg-dev \
    libjpeg-turbo8-dev \
    libjpeg8-dev \
    liblapack-dev \
    liblapacke-dev \
    libmp3lame-dev \
    libopenblas-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libpng-dev \
    libpostproc-dev \
    libprotobuf-dev \
    libswresample-dev \
    libswscale-dev \
    libtbb-dev \
    libtesseract-dev \
    libtheora-dev \
    libtiff-dev \
    libv4l-dev \
    libvorbis-dev \
    libx264-dev \
    libxine2-dev \
    libxvidcore-dev \
    protobuf-compiler \
    v4l-utils

WORKDIR /usr/src

# Retrieve opencv_contrib 4.10.0 + PR#3751 (CUDA < 12.4 regression fix)
RUN git config --global http.postBuffer 524288000 && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv_contrib && \
    git checkout b236c71c2f8d983403c35a0cea8bec0432a4b0fe
# Retrieve OpenCV 4.10.0
RUN git clone --depth 1 --branch 4.10.0 https://github.com/opencv/opencv.git

# Add the build script
COPY container-build-opencv-x64.sh .

ENV CUDA_PATH=/usr/local/cuda-12.2

CMD ["bash", "container-build-opencv-x64.sh"]
